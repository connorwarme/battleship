(()=>{"use strict";var e={733:(e,t,n)=>{n.d(t,{Z:()=>r});const r=()=>{const e=[],t=[],n=(t,n,r,l)=>{let a,s=[];if(n)for(let n=0;n<t;n++)s.push(e[r+n][l]>0);else for(let n=0;n<t;n++)s.push(e[r][l+n]>0);return a=s.find((e=>1==e)),a},r=(t,n,r,l)=>{let a;return n?(a=r+t,a>e.length):(a=l+t,a>e[r].length)},l=e=>t.find((t=>t.marker===e)),a=()=>t.every((e=>!0===e.isSunk())),s=[],o=(t,n,r)=>e[t][n]=r,i=(t,n,r)=>{if(r.value=e[t][n],r.value>0){const s=((t,n)=>{const r=l(e[t][n]).hitPlus();return o(t,n,e[t][n]+10),r})(t,n);s&&(r.sunk=!0,a()&&(r.allSunk=!0)),r.ship=r.value,r.value=!0}else((e,t)=>{((e,t)=>{s.push([e,t])})(e,t),o(e,t,-1)})(t,n),r.value=!1;return r};return{board:e,create:t=>{for(let n=0;n<t;n++){let n=[];e.push(n);for(let e=0;e<t;e++)n.push(0)}return e},placeShip:(l,a,s,o)=>{if(r(l.length,a,s,o)||n(l.length,a,s,o))return!1;if(a)for(let t=0;t<l.length;t++)e[s+t][o]=l.marker,l.coords.push([s+t,o]);else for(let t=0;t<l.length;t++)e[s][o+t]=l.marker,l.coords.push([s,o+t]);return t.push(l),!0},checkPlace:n,checkMiss:(t,n,r,l)=>{let a,s=[];if(n)for(let n=0;n<t;n++)s.push(-1==e[r+n][l]);else for(let n=0;n<t;n++)s.push(-1==e[r][l+n]);return a=s.find((e=>1==e)),a},checkProb:(e,t,n,r,l)=>{let a=1;const s=[];for(let l=0;l<e;l++)t?s.push([Number(n)+l,r]):s.push([n,Number(r)+l]);return l.forEach((e=>{for(let t=0;t<s.length;t++)e[0]==s[t][0]&&e[1]==s[t][1]&&(a*=50)})),a},checkOnBoard:r,whichShip:l,receiveAttack:(t,n)=>{const r={sunk:!1,allSunk:!1};return((t,n)=>!(e[t][n]>10||-1==e[t][n]))(t,n)?i(t,n,r):(r.value=0,r)},allSunk:a}}},922:(e,t,n)=>{n.d(t,{u:()=>a});var r=n(923),l=n(489);const a=(()=>{const e=(0,r.a)("div",{class:"commContainer"}),t=["empty","submarine","patrol boat","cruiser","destroyer","battle carrier"],n=[{0:"you",1:"their"},{0:"they",1:"your"}];return{buildComms:()=>{const t=(0,r.a)("div",{class:"comms"});return t.textContent="",t.style.display="none",e.appendChild(t),e},clear:()=>{e.firstChild.textContent="",e.removeChild(e.lastChild)},instruct:(t,n)=>{e.firstChild.textContent=`${t.codename}: Place your ${n}.`},message:(t,n)=>{e.firstChild.textContent=`${t.codename}: ${n}`},updateText:(r,l,a,s,o,i)=>{let c=i?n[0]:n[1];if(l)e.firstChild.textContent=`Attention ${r.codename}: Error! Must select new coordinates.`;else if(!0===s)e.firstChild.textContent=`${r.codename} fires a shot and ${c[0]} sunk ${c[1]} ${t[o]}!`;else{let t=a?"lands a strike!":"misses!";e.firstChild.textContent=`${r.codename} attacks and ${t}`}},endGame:t=>{const n=e.nextElementSibling;(0,r.q)(e),(0,r.q)(n);const a=(0,r.a)("div",{class:"endContainer"}),s=(0,r.a)("div",{class:"banner"});s.textContent="Game Over!";const o=(0,r.a)("div",{class:"winner"});o.textContent=`Winner: ${t.codename}`;const i=(0,r.a)("button",{class:"playAgain"});i.textContent="Play Again",n.appendChild(a),a.appendChild(s),a.appendChild(o),a.appendChild(i),i.addEventListener("click",(()=>{n.parentElement.removeChild(n),e.parentElement.removeChild(e),(0,l.Q)()})),n.parentElement.children[0].lastChild.style.display="none"}}})()},605:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(733);const l=e=>{let t=0;return{codename:e,wins:t,attack:(e,t)=>t.receiveAttack(e[0],e[1]),addWin:()=>t+=1}},a=()=>{const e=l("The Kraken"),t=(0,r.Z)();t.create(10);const n=()=>Math.floor(10*Math.random()),a=()=>[n(),n()],s=[],o=e=>{let t=!0;for(let n=0;n<s.length;n++)s[n][0]===e[0]&&s[n][1]===e[1]&&(t=!1);return t},i=()=>0==Math.floor(2*Math.random()),c=[],d=(e,t,n,r,l,a)=>{for(let s=0;s<n;s++){const o=e.checkProb(n,r,l,a,c);r?t[Number(l)+s][a]+=o:t[l][Number(a)+s]+=o}h(e,t)},h=(e,t)=>{for(let n=0;n<e.board.length;n++)for(let r=0;r<e.board[n].length;r++)e.board[n][r]>0&&(t[n][r]=0)};return Object.assign({},e,{randomAttack:e=>{const t=(()=>{let e=a();for(;!o(e);)e=a();return e})();s.push(t);const n={};return n.coord=t,n.obj=e.receiveAttack(t[0],t[1]),n}},{smartAttack:e=>{const n=(()=>{const e=(0,r.Z)();return e.create(10),e})();((e,t,n)=>{Object.keys(t).forEach((r=>{t[r].sunk||((e,t,n)=>{for(let r=0;r<e.board.length;r++)for(let l=0;l<e.board[r].length;l++)e.checkOnBoard(t.length,!0,r,l)||e.checkMiss(t.length,!0,r,l)||d(e,n.board,t.length,!0,r,l);for(let r=0;r<e.board.length;r++)for(let l=0;l<e.board[r].length;l++)e.checkOnBoard(t.length,!1,r,l)||e.checkMiss(t.length,!1,r,l)||d(e,n.board,t.length,!1,r,l)})(e,t[r],n)}))})(t,e.fleet,n);const l=(e=>{const t={max:0};for(let n=0;n<e.length;n++)for(let r=0;r<e[n].length;r++)e[n][r]>t.max&&(t.max=e[n][r],t.coords=[n,r]);return t})(n.board),a={};return a.coord=l.coords,a.obj=e.gb.receiveAttack(a.coord[0],a.coord[1]),((e,n)=>{const r=e.coord;var l;1==e.obj.value?(1==e.obj.sunk?(e=>{e.coords.forEach((e=>{let t=c.findIndex((t=>{if(t[0]==e[0]&&t[1]==e[1])return t}));c.splice(t,1)}))})(n.gb.whichShip(e.obj.ship)):(l=r,c.push(l)),t.board[r[0]][r[1]]=1):t.board[r[0]][r[1]]=-1})(a,e),a}},{placeFleet:e=>{Object.keys(e.fleet).forEach((t=>{let n=i(),r=a();for(;!e.gb.placeShip(e.fleet[t],n,r[0],r[1]);)n=i(),r=a()}))}})};var s=n(643),o=n(923);const i=e=>{e.addEventListener("mouseenter",(()=>{"cell"==e.classList.value?(e.style.cursor="crosshair",e.style.backgroundColor="#38B000"):(e.style.cursor="not-allowed",e.style.backgroundColor="#000000")})),e.addEventListener("mouseout",(()=>{Array.from(e.parentElement.children).forEach((e=>{1==e.classList.length?e.style.backgroundColor="white":"cell hit"==e.classList.value?e.style.backgroundColor="rgb(208, 0, 0)":"cell miss"==e.classList.value?e.style.backgroundColor="rgb(35, 100, 170)":"cell sunk"==e.classList.value&&(e.style.backgroundColor="rgb(208, 0, 0)")}))}))},c=(e,t,n)=>{const r=e.board,l=(0,o.a)("div",{class:"displayBoard"});for(let e=0;e<r.length;e++){const a=(0,o.a)("div",{class:"col",id:`${e}`});l.appendChild(a);for(let l=0;l<r[e].length;l++){const r=(0,o.a)("div",{class:"cell",id:`${e}${l}`});t&&(r.addEventListener("click",(t=>{v.getTurn()&&n([e,l],t)})),i(r)),a.appendChild(r)}}return l},d=(e,t)=>{const n=e.board;for(let e=0;e<n.length;e++)for(let r=0;r<n[e].length;r++)n[e][r]>0&&t.children[e].children[r].classList.add("ship")},h=(e,t,n,r,l,a)=>{n.sunk?r.whichShip(n.ship).coords.forEach((e=>{l.children[e[0]].children[e[1]].classList="cell sunk",l.children[e[0]].children[e[1]].textContent=`${a}`})):n.value?(l.children[e].children[t].classList.add("hit"),l.children[e].children[t].textContent="🔥"):(l.children[e].children[t].classList.add("miss"),l.children[e].children[t].textContent="🌊")},u=(e,t,n,r)=>{const l=(0,o.a)("div",{class:"boardContainer"});return l.appendChild((e=>{const t=(0,o.a)("div",{class:"labelContainer"}),n=(0,o.a)("div",{class:"boardLabel"});return n.textContent=`${e} waters`,t.appendChild(n),t})(n)),l.appendChild(c(e,t,r)),l};var p=n(922);const m=(()=>{let e=!0;const t=()=>e,n=(e,t,n,r,l)=>!e.checkOnBoard(t.length,n,r,l)&&!e.checkPlace(t.length,n,r,l),r=(r,l,a,s,o)=>{r.addEventListener("mouseenter",(()=>{n(l,a,t(),s,o)?(r.style.cursor="pointer",((t,n)=>{const r=Array.from(t.id);let l;for(let t=0;t<n;t++)l=e?`${Number(r[0])+t}${r[1]}`:`${r[0]}${Number(r[1])+t}`,document.getElementById(l).style.backgroundColor="slategray"})(r,a.length)):(r.style.cursor="not-allowed",r.style.backgroundColor="rgb(208, 0, 0)")})),r.addEventListener("mouseout",(()=>{Array.from(document.querySelectorAll("div.cell")).forEach((e=>{1==e.classList.length?e.style.backgroundColor="white":2==e.classList.length&&(e.style.backgroundColor="slategray")}))}))};let l,a,s,i,h,u=0;const m=(e,t)=>{u<5?(p.u.instruct(t.player,i[u]),C(e,t.gb,t.fleet[i[u]])):(console.log("Next step of gameloop!"),b())},C=(o,i,p)=>{(e=>{s=e})(p),o.appendChild(c(i,!1)),d(a,h.children[0]),((a,o)=>{Array.from(document.querySelectorAll("div.cell")).forEach((i=>{const c=Number(i.id.charAt(0)),d=Number(i.id.charAt(1));r(i,a,o,c,d),((r,a,o,i,c)=>{n(a,o,t(),i,c)&&r.addEventListener("click",(()=>{((t,n)=>{l.gb.placeShip(s,e,t,n),u++,h.removeChild(h.lastChild),m(h,l)})(i,c)}))})(i,a,o,c,d)}))})(i,p)},b=()=>{p.u.clear(),v.launchGame(h),window.matchMedia("(min-width: 550px)")&&(h.parentElement.parentElement.children[0].children[1].style.display="block")};return{hover:r,start:(t,n,r)=>{var c;t.parentElement.parentElement.children[1].appendChild((t=>{const n=(0,o.a)("div",{class:"placeContainer"}),r=(0,o.a)("div",{class:"placeBtnContainer"}),i=(0,o.a)("button",{class:"axisBtn"});i.textContent="Rotate";const c=(0,o.a)("button",{class:"randomBtn"});c.textContent="Random";const d=(0,o.a)("div",{class:"placeInstructions"}),u=(0,o.a)("div",{class:"instructTitle"});u.textContent="Instructions:";const p=(0,o.a)("div",{class:"instructText"});p.textContent="Select coordinates on board to place current ship.";const m=(0,o.a)("div",{class:"instructText"});return m.textContent="Use buttons to rotate ship or randomly deploy entire fleet.",i.addEventListener("click",(()=>{e=!e,h.removeChild(h.lastChild),C(h,a,s)})),c.addEventListener("click",(()=>{t.player.placeFleet(l),h.removeChild(h.lastChild),b()})),n.appendChild(r),r.appendChild(i),r.appendChild(c),n.appendChild(d),d.appendChild(u),d.appendChild(p),d.appendChild(m),n})(r)),h=t,l=c=n,a=c.gb,i=Object.keys(c.fleet),m(t,n)}}})(),C=[{emoji:" ",text:"friendly ship",class:"ship"},{emoji:"🌊",text:"attack miss",class:"miss"},{emoji:"🔥",text:"attack hit",class:"hit"},{emoji:"🔱",text:"you sunk enemy ship",class:"sunk"},{emoji:"🏴‍☠️",text:"enemy sunk friendly ship",class:"sunk"}],b=e=>{let t;t=e?l(`${e}`):a();const n=(0,r.Z)();return n.create(10),{player:t,gb:n,fleet:(0,s.X)()}},f=(()=>{let e,t,n,r,l=!0;const a=()=>l=!l,s=(t,l,a)=>{a.appendChild(u(t,!1,"friendly")),d(t,a.firstChild.lastChild),n=a.firstChild.lastChild,a.appendChild(u(l,!0,"enemy",f.turn)),r=a.lastChild.lastChild,a.appendChild((()=>{const e=(0,o.a)("div",{class:"legendContainer"}),t=(0,o.a)("div",{class:"legendBox"});t.textContent="Legend:";const n=(0,o.a)("ul",{class:"legendList"});C.forEach((e=>{const t=(0,o.a)("li",{class:"emojiLi"}),r=(0,o.a)("div",{class:`emojiBox ${e.class}`});r.textContent=`${e.emoji}`;const l=(0,o.a)("div",{class:"emojiText"});l.textContent=`- ${e.text}`,t.appendChild(r),t.appendChild(l),n.appendChild(t)})),t.appendChild(n),e.appendChild(t);const r=(0,o.a)("div",{class:"instructBox"});r.textContent="Instructions:";const l=(0,o.a)("div",{class:"instructText"});l.textContent="Select coordinates in enemy waters to launch an attack. The board will indicate a hit or miss, or if you sunk the enemy ship. Find and eliminate all five enemy ships before they eliminate yours!";const a=(0,o.a)("div",{class:"objectiveBox"});a.textContent="Objective:";const s=(0,o.a)("div",{class:"objectiveText"});return s.textContent="Sink the enemy fleet!",a.appendChild(s),e.appendChild(a),r.appendChild(l),e.appendChild(r),e})()),p.u.message(e.player,"launch an attack!")};let i={};const c=s=>{let o;i=l?e.player:t.player,l?(o=t.gb.receiveAttack(s[0],s[1]),0===o.value?p.u.updateText(i,!0,""):(h(s[0],s[1],o,t.gb,r,"🔱"),p.u.updateText(i,!1,o.value,o.sunk,o.ship,!0),a())):(o=t.player.smartAttack(e),h(o.coord[0],o.coord[1],o.obj,e.gb,n,"🏴‍☠️"),p.u.updateText(i,!1,o.obj.value,o.obj.sunk,o.obj.ship,!1),a(),o=o.obj),l||o.allSunk||setTimeout((()=>{c(!1)}),1500),o.allSunk&&(a(),console.log("game over"),p.u.endGame(i))};return{getTurn:()=>l,initialTurn:s,initializeGame:(n,r)=>{const l=b(`${n}`),a=b(!1);return r.parentElement.parentElement.children[1].firstChild.style.display="flex",a.player.placeFleet(a),m.start(r,l,a),e=l,t=a,{p1:l,p2:a}},launchGame:n=>{s(e.gb,t.gb,n)},turn:c}})(),v=f},489:(e,t,n)=>{n.d(t,{Q:()=>o});var r=n(923);n.p,n.p,n.p;var l=n(605),a=n(922);const s=()=>{const e=(0,r.a)("div",{class:"main"}),t=(0,r.a)("div",{class:"mainContainer"}),n=(0,r.a)("div",{class:"initialContent"}),a=(0,r.a)("div",{class:"instructionsContainer"}),s=(0,r.a)("div",{class:"instructions"});s.textContent="Eliminate the enemy fleet!";const o=(0,r.a)("div",{class:"inputContainer"}),i=(0,r.a)("input",{type:"text",id:"username",class:"inputField",placeholder:"Aquaman 🔱"}),c=(0,r.a)("label",{for:"username"});c.textContent="Enter Player Name:";const d=(0,r.a)("div",{class:"startContainer"}),h=(0,r.a)("button",{class:"start"});h.textContent="Start Game!";return h.addEventListener("click",(()=>{(()=>{let e="Aquaman 🔱";i.value&&(e=i.value),(0,r.q)(t),l.Z.initializeGame(e,t)})()})),e.appendChild(t),t.appendChild(n),n.appendChild(a),a.appendChild(s),n.appendChild(o),o.appendChild(c),o.appendChild(i),n.appendChild(d),d.appendChild(h),e},o=()=>{const e=document.querySelector("div.body");e.insertBefore(a.u.buildComms(),e.children[1]),e.insertBefore(s(),e.children[2])}},643:(e,t,n)=>{n.d(t,{X:()=>l});const r=(e,t)=>{const n=e;let r=0,l=!1,a=n;t&&(a=t);const s=()=>{r+=1},o=()=>l=n<=r;return{length:n,sunk:l,marker:a,coords:[],getHits:()=>r,hit:s,isSunk:o,hitPlus:()=>(s(),o())}},l=()=>({submarine:r(3,1),patrol:r(2),destroyer:r(3),battleship:r(4),carrier:r(5)})},923:(e,t,n)=>{n.d(t,{a:()=>r,q:()=>a});const r=(e,t)=>{const n=document.createElement(`${e}`);return null==t||l(n,t),n},l=(e,t)=>{Object.entries(t).forEach((([t,n])=>{e.setAttribute(t,n)}))},a=e=>{for(;e.children.length>0;)e.removeChild(e.firstChild)}}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(489)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,